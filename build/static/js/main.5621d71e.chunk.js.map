{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","getWeatherData","fetch","then","res","json","result","console","log","coord","lon","lat","weather","main","description","icon","temp","temp_min","temp_max","feels_like","humidity","wind","speed","deg","sys","country","sunrise","sunset","name","geoTz","require","timezone","JSON","stringify","moment","tz","setDefault","date","format","time","WindDirection","setState","isLoaded","data","unix","toFixed","degreesDirection","degrees","value","Math","floor","error","errorMessage","message","state","this","className","Helmet","lang","content","Container","Row","Col","md","src","alt","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5621d71e.chunk.js","sourcesContent":["import React from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport {Helmet} from 'react-helmet';\nimport 'moment-timezone';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n      isLoaded: false,\n      errorMessage: ''\n    };\n  }\n\n  getWeatherData = () => {\n    const API = 'https://mm214.com/demo.php/';\n\n    fetch(API)\n      .then(res => res.json())\n      .then(\n        (result) => {\n\n            console.log(result);\n\n            const { lon, lat } = result.coord;\n            const { main, description, icon } = result.weather[0];\n            const { temp, temp_min, temp_max, feels_like, humidity } = result.main;\n            const { speed, deg } = result.wind;\n            const { country, sunrise, sunset } = result.sys;\n            const { name } = result;\n\n            var geoTz = require('geo-tz');\n            var timezone = JSON.stringify(geoTz(lat, lon));\n\n            var moment = require('moment-timezone');\n            moment.tz.setDefault(timezone);\n\n            const date = moment().format('MMMM Do, YYYY');\n            const time = moment().format('h:mm a');\n\n            const WindDirection = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW'];\n            const degreesDirection = (degrees) => {\n              const value = Math.floor((degrees / 22.5) + 0.5);\n              return WindDirection[value % 16];\n            };\n\n          this.setState({\n            isLoaded: true,\n            data: {\n              name,\n              country,\n              sunrise: moment.unix(sunrise).format('h:mm a'),\n              sunset: moment.unix(sunset).format('h:mm a'),\n              speed: (speed / 1.609344).toFixed(0),\n              deg,\n              temp: (((temp - 273.15) * 1.8) + 32).toFixed(1),\n              temp_min: (((temp_min - 273.15) * 1.8) + 32).toFixed(1),\n              temp_max: (((temp_max - 273.15) * 1.8) + 32).toFixed(1),\n              feels_like: (((feels_like - 273.15) * 1.8) + 32).toFixed(0),\n              humidity,\n              main,\n              description,\n              icon: 'http://openweathermap.org/img/wn/' + icon + '@2x.png',\n              lon,\n              lat,\n              timezone,\n              date,\n              time,\n              degreesDirection,\n            }\n          });\n\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            errorMessage: error.message\n          });\n        }\n      );\n  }\n\n  componentDidMount() {\n    this.getWeatherData();\n  }\n\n  render() {\n    const { errorMessage, isLoaded, data } = this.state;\n\n    if (errorMessage) {\n      return (\n        <div className='weatherApp'>\n        <Helmet>\n          <html lang='en' />\n          <title>Weather Data App</title>\n          <meta name='description' content='View the weather!'/>\n        </Helmet>\n        <Container className = 'p-5'>\n          <Row>\n            <Col className = 'pt-4'>\n              <h1 className = 'error' > Error: { errorMessage } </h1>\n            </Col>\n          </Row>\n        </Container>\n        </div>\n      );\n    } else if (!isLoaded) {\n      return (\n        <div className='weatherApp'>\n        <Helmet>\n          <html lang='en' />\n          <title>Weather Data App</title>\n          <meta name='description' content='View the weather!'/>\n        </Helmet>\n        <Container className = 'p-5'>\n          <Row>\n            <Col className = 'pt-4'>\n              <h1> Loading... </h1>\n            </Col>\n          </Row>\n        </Container>\n        </div>\n      );\n    } else {\n\n       const { name, country, sunrise, sunset, speed, deg, temp, temp_min, temp_max, feels_like, humidity, main, description, icon, lon, lat, timezone, date, time, degreesDirection } = data;\n     \n       return (\n          <div className='weatherApp'>\n            <Helmet>\n              <html lang='en' />\n              <title>Weather Data App</title>\n              <meta name='description' content='View the weather!' />\n            </Helmet>\n            <Row className = 'py-4'>\n              <Col>\n                <header>\n                  <Container>\n                    <h1>View the weather!</h1>\n                  </Container>\n                </header>\n              </Col>\n            </Row>\n            <main>\n              <Container className = 'weather-main pt-4 pb-5'>\n                <Row className = 'd-flex justify-content-md-center'>\n                  <Col md={4} className='pb-5'>\n                    <div className = 'weather-date'>\n                      <h3 className = 'h2 pb-4'>{ time }</h3>\n                      <p>{ date }</p>\n                      <p>Sunrise: { sunrise } <br /> Sunset: { sunset }</p>\n                    </div>\n                    <div className = 'weather-coord'>\n                      <p>Coordinates: <br /> { lat }, { lon }</p>\n                    </div>\n                  </Col>\n                  <Col md={4} className='pb-5'>\n                    <h3 className = 'h2'>{ name }, { country }</h3>\n                    <img src = { icon } alt = 'weather icon { description }' className = 'weather-icon' />\n                    <h2 className = 'description'> { description } </h2>\n                  </Col>\n                  <Col md={4}>\n                    <div className = 'temp-main'>\n                      <h3 className = 'h2 temperature pb-4'> { temp }°F </h3>\n                      <p> Feels like { feels_like }°F </p>\n                      <p>H { temp_max }°F <br /> L { temp_min }°F</p>\n                    </div>\n                    <div className = 'weather-prop'>\n                      <p> Wind: { degreesDirection(deg) }, { speed } mph\n                      <br /> Humidity: { humidity }% </p>\n                    </div>\n                  </Col>\n                </Row>\n              </Container>\n            </main>\n            <footer>\n              <Container className = 'mt-3'>\n                <Row>\n                  <Col>\n                    <p>You are viewing the weather in the following time zone: < /p>\n                    <p>{ timezone }.< /p>\n                  </Col>\n                </Row>  \n              </Container>\n            </footer>\n          </div>\n        );\n    }\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render( \n\t<App /> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}