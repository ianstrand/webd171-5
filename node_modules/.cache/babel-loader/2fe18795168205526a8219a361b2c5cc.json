{"ast":null,"code":"'use strict';\n\nmodule.exports = encode;\nvar keys,\n    keysNum,\n    keysArr,\n    dim,\n    e,\n    maxPrecision = 1e6;\nvar geometryTypes = {\n  'Point': 0,\n  'MultiPoint': 1,\n  'LineString': 2,\n  'MultiLineString': 3,\n  'Polygon': 4,\n  'MultiPolygon': 5,\n  'GeometryCollection': 6\n};\n\nfunction encode(obj, pbf) {\n  keys = {};\n  keysArr = [];\n  keysNum = 0;\n  dim = 0;\n  e = 1;\n  analyze(obj);\n  e = Math.min(e, maxPrecision);\n  var precision = Math.ceil(Math.log(e) / Math.LN10);\n\n  for (var i = 0; i < keysArr.length; i++) {\n    pbf.writeStringField(1, keysArr[i]);\n  }\n\n  if (dim !== 2) pbf.writeVarintField(2, dim);\n  if (precision !== 6) pbf.writeVarintField(3, precision);\n  if (obj.type === 'FeatureCollection') pbf.writeMessage(4, writeFeatureCollection, obj);else if (obj.type === 'Feature') pbf.writeMessage(5, writeFeature, obj);else pbf.writeMessage(6, writeGeometry, obj);\n  keys = null;\n  return pbf.finish();\n}\n\nfunction analyze(obj) {\n  var i, key;\n\n  if (obj.type === 'FeatureCollection') {\n    for (i = 0; i < obj.features.length; i++) {\n      analyze(obj.features[i]);\n    }\n  } else if (obj.type === 'Feature') {\n    if (obj.geometry !== null) analyze(obj.geometry);\n\n    for (key in obj.properties) {\n      saveKey(key);\n    }\n  } else if (obj.type === 'Point') analyzePoint(obj.coordinates);else if (obj.type === 'MultiPoint') analyzePoints(obj.coordinates);else if (obj.type === 'GeometryCollection') {\n    for (i = 0; i < obj.geometries.length; i++) {\n      analyze(obj.geometries[i]);\n    }\n  } else if (obj.type === 'LineString') analyzePoints(obj.coordinates);else if (obj.type === 'Polygon' || obj.type === 'MultiLineString') analyzeMultiLine(obj.coordinates);else if (obj.type === 'MultiPolygon') {\n    for (i = 0; i < obj.coordinates.length; i++) {\n      analyzeMultiLine(obj.coordinates[i]);\n    }\n  }\n\n  for (key in obj) {\n    if (!isSpecialKey(key, obj.type)) saveKey(key);\n  }\n}\n\nfunction analyzeMultiLine(coords) {\n  for (var i = 0; i < coords.length; i++) {\n    analyzePoints(coords[i]);\n  }\n}\n\nfunction analyzePoints(coords) {\n  for (var i = 0; i < coords.length; i++) {\n    analyzePoint(coords[i]);\n  }\n}\n\nfunction analyzePoint(point) {\n  dim = Math.max(dim, point.length); // find max precision\n\n  for (var i = 0; i < point.length; i++) {\n    while (Math.round(point[i] * e) / e !== point[i] && e < maxPrecision) {\n      e *= 10;\n    }\n  }\n}\n\nfunction saveKey(key) {\n  if (keys[key] === undefined) {\n    keysArr.push(key);\n    keys[key] = keysNum++;\n  }\n}\n\nfunction writeFeatureCollection(obj, pbf) {\n  for (var i = 0; i < obj.features.length; i++) {\n    pbf.writeMessage(1, writeFeature, obj.features[i]);\n  }\n\n  writeProps(obj, pbf, true);\n}\n\nfunction writeFeature(feature, pbf) {\n  if (feature.geometry !== null) pbf.writeMessage(1, writeGeometry, feature.geometry);\n\n  if (feature.id !== undefined) {\n    if (typeof feature.id === 'number' && feature.id % 1 === 0) pbf.writeSVarintField(12, feature.id);else pbf.writeStringField(11, feature.id);\n  }\n\n  if (feature.properties) writeProps(feature.properties, pbf);\n  writeProps(feature, pbf, true);\n}\n\nfunction writeGeometry(geom, pbf) {\n  pbf.writeVarintField(1, geometryTypes[geom.type]);\n  var coords = geom.coordinates;\n  if (geom.type === 'Point') writePoint(coords, pbf);else if (geom.type === 'MultiPoint') writeLine(coords, pbf, true);else if (geom.type === 'LineString') writeLine(coords, pbf);else if (geom.type === 'MultiLineString') writeMultiLine(coords, pbf);else if (geom.type === 'Polygon') writeMultiLine(coords, pbf, true);else if (geom.type === 'MultiPolygon') writeMultiPolygon(coords, pbf);else if (geom.type === 'GeometryCollection') {\n    for (var i = 0; i < geom.geometries.length; i++) {\n      pbf.writeMessage(4, writeGeometry, geom.geometries[i]);\n    }\n  }\n  writeProps(geom, pbf, true);\n}\n\nfunction writeProps(props, pbf, isCustom) {\n  var indexes = [],\n      valueIndex = 0;\n\n  for (var key in props) {\n    if (isCustom && isSpecialKey(key, props.type)) {\n      continue;\n    }\n\n    pbf.writeMessage(13, writeValue, props[key]);\n    indexes.push(keys[key]);\n    indexes.push(valueIndex++);\n  }\n\n  pbf.writePackedVarint(isCustom ? 15 : 14, indexes);\n}\n\nfunction writeValue(value, pbf) {\n  if (value === null) return;\n  var type = typeof value;\n  if (type === 'string') pbf.writeStringField(1, value);else if (type === 'boolean') pbf.writeBooleanField(5, value);else if (type === 'object') pbf.writeStringField(6, JSON.stringify(value));else if (type === 'number') {\n    if (value % 1 !== 0) pbf.writeDoubleField(2, value);else if (value >= 0) pbf.writeVarintField(3, value);else pbf.writeVarintField(4, -value);\n  }\n}\n\nfunction writePoint(point, pbf) {\n  var coords = [];\n\n  for (var i = 0; i < dim; i++) {\n    coords.push(Math.round(point[i] * e));\n  }\n\n  pbf.writePackedSVarint(3, coords);\n}\n\nfunction writeLine(line, pbf) {\n  var coords = [];\n  populateLine(coords, line);\n  pbf.writePackedSVarint(3, coords);\n}\n\nfunction writeMultiLine(lines, pbf, closed) {\n  var len = lines.length,\n      i;\n\n  if (len !== 1) {\n    var lengths = [];\n\n    for (i = 0; i < len; i++) {\n      lengths.push(lines[i].length - (closed ? 1 : 0));\n    }\n\n    pbf.writePackedVarint(2, lengths); // TODO faster with custom writeMessage?\n  }\n\n  var coords = [];\n\n  for (i = 0; i < len; i++) {\n    populateLine(coords, lines[i], closed);\n  }\n\n  pbf.writePackedSVarint(3, coords);\n}\n\nfunction writeMultiPolygon(polygons, pbf) {\n  var len = polygons.length,\n      i,\n      j;\n\n  if (len !== 1 || polygons[0].length !== 1) {\n    var lengths = [len];\n\n    for (i = 0; i < len; i++) {\n      lengths.push(polygons[i].length);\n\n      for (j = 0; j < polygons[i].length; j++) {\n        lengths.push(polygons[i][j].length - 1);\n      }\n    }\n\n    pbf.writePackedVarint(2, lengths);\n  }\n\n  var coords = [];\n\n  for (i = 0; i < len; i++) {\n    for (j = 0; j < polygons[i].length; j++) {\n      populateLine(coords, polygons[i][j], true);\n    }\n  }\n\n  pbf.writePackedSVarint(3, coords);\n}\n\nfunction populateLine(coords, line, closed) {\n  var i,\n      j,\n      len = line.length - (closed ? 1 : 0),\n      sum = new Array(dim);\n\n  for (j = 0; j < dim; j++) {\n    sum[j] = 0;\n  }\n\n  for (i = 0; i < len; i++) {\n    for (j = 0; j < dim; j++) {\n      var n = Math.round(line[i][j] * e) - sum[j];\n      coords.push(n);\n      sum[j] += n;\n    }\n  }\n}\n\nfunction isSpecialKey(key, type) {\n  if (key === 'type') return true;else if (type === 'FeatureCollection') {\n    if (key === 'features') return true;\n  } else if (type === 'Feature') {\n    if (key === 'id' || key === 'properties' || key === 'geometry') return true;\n  } else if (type === 'GeometryCollection') {\n    if (key === 'geometries') return true;\n  } else if (key === 'coordinates') return true;\n  return false;\n}","map":null,"metadata":{},"sourceType":"script"}